Domain file:
(define (domain cooking)
(:types pot ingredient)
(:predicates 
(arm-empty)
(pot-empty ?p - pot)
(holding ?i - ingredient)
(contain ?p - pot ?i - ingredient)
)
(:action pick
  :parameters (?i - ingredient)
  :precondition (and (arm-empty))
  :effect (and (holding ?i -ingredient) (not (arm-empty)))
)
(:action putdown
  :parameters  (?i - ingredient)
  :precondition  (and (holding ?i -ingredient))
  :effect (and (not (holding ?i -ingredient)) (arm-empty))
)
(:action add
  :parameters  (?i - ingredient ?p - pot)
  :precondition (and (holding ?i -ingredient))
  :effect (and (not (pot-empty ?p)) (contain ?p ?i))
))
Problem file:
(define (problem threepots)
(:domain cooking)
(:objects pot1 pot2 pot3 - pot
ingredient1 ingredient2 ingredient3 ingredient4 ingredient5 ingredient6 - ingredient)
(:init 
(arm-empty)
(pot-empty pot1)
(pot-empty pot2)
(pot-empty pot3)
)
(:goal
(and 
(contain pot1 ingredient1)
(contain pot1 ingredient4)
(contain pot2 ingredient2)
(contain pot2 ingredient3)
(contain pot2 ingredient5)
(contain pot2 ingredient6)
(contain pot3 ingredient1)
(contain pot3 ingredient4)
(contain pot3 ingredient5))
))

Action Sequence:
Step 1: ingredient1 is needed in pot1, pot3
(pick ingredient1)
(add ingredient1 pot1)
(add ingredient1 pot3)
(putdown ingredient1)
Step 2: ingredient2 is needed in pot2
(pick ingredient2)
(add ingredient2 pot2)
(putdown ingredient2)
Step 3: ingredient3 is needed in pot2
(pick ingredient3)
(add ingredient3 pot2)
(putdown ingredient3)
Step 4: ingredient4 is needed in pot1, pot3
(pick ingredient4)
(add ingredient4 pot1)
(add ingredient4 pot3)
(putdown ingredient4)
Step 5: ingredient5 is needed in pot2, pot3
(pick ingredient5)
(add ingredient5 pot2)
(add ingredient5 pot3)
(putdown ingredient5)
Step 6: ingredient6 is needed in pot2
(pick ingredient6)
(add ingredient6 pot2)
(putdown ingredient6)
All ingredients have been added to the corresponding pots.
